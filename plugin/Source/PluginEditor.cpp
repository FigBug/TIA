/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include "BinaryData.h"

//==============================================================================
TIAAudioProcessorEditor::TIAAudioProcessorEditor (TIAAudioProcessor& p)
    : slAudioProcessorEditor (p, 60, 100), processor (p)
{
    additionalProgramming = "Ron Fries";
    
    logo = ImageFileFormat::loadFrom (BinaryData::logo_png, BinaryData::logo_pngSize);
    
    addAndMakeVisible (&scope);
    
    for (slParameter* pp : p.getPluginParameters())
    {
        ParamComponent* c;
        c = new Knob (pp, true);
        
        addAndMakeVisible (c);
        controls.add (c);
    }
    
    setGridSize (8, 2);
    
    scope.setNumSamplesPerPixel (2);
    scope.setVerticalZoomFactor (3.0f);
}

TIAAudioProcessorEditor::~TIAAudioProcessorEditor()
{
}

//==============================================================================
void TIAAudioProcessorEditor::paint (Graphics& g)
{
    slAudioProcessorEditor::paint (g);
        
    g.drawImageAt (logo, getWidth() / 2 - logo.getWidth() / 2, 0);
}

void TIAAudioProcessorEditor::resized()
{
    using AP = TIAAudioProcessor;
    
    slAudioProcessorEditor::resized();
    
    Rectangle<int> r = getControlsArea();
    
    for (int i = 0; i < 8; i++)
    {
        auto* c = controls[i];
        c->setBounds (getGridArea (i % 4, i / 4));
    }
    
    scope.setBounds (getGridArea (4, 0, 4, 2).reduced (5));
}
